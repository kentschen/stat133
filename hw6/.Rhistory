sim.doctors <- function(initial.doctors, n.doctors, n.days, p){
initial.doctors <- samples(0:1, size=n.doctors, rep = TRUE)
m <- matrix(rep(initial.doctors, times = n.days), ncol = n.days)
for (i in 2: n.days){
pair = sample(1: n.doctors, size = 2)
if(m[pair[1], i] != m[pair[2], i]){
m.i = m[pair,i]
m.i[m.i == 0] = sample(0:1, size = 1, prob = c(1-p, p))
m[pair, i:n.days] = m.i
}
}
return(m)
}
set.seed(42)
n.doctors = 100
initial.doctors = sample(c(0, 1), size = n.doctors, prob = c(0.9, 0.1), replace = T)
n.days = 500
p_0.2 = sim.doctors(initial.doctors, n.doctors, n.days, 0.2)
p_0.4 = sim.doctors(initial.doctors, n.doctors, n.days, 0.4)
p_0.6 = sim.doctors(initial.doctors, n.doctors, n.days, 0.6)
p_0.8 = sim.doctors(initial.doctors, n.doctors, n.days, 0.8)
p_1.0 = sim.doctors(initial.doctors, n.doctors, n.days, 1.0)
sim.doctors <- function(initial.doctors, n.doctors, n.days, p){
# Set up the output variable, define it as a matrix then use initial.doctors
# to set the first column (day)
has_adopted=matrix(initial.doctors,nrow=n.doctors,ncol=n.days)
# Run a simulation for <n.days> (use a for loop).  In the loop:
# 1) pick two random doctors
# 2) check if one has adopted the other hasn't
# 3) convert the non-adopter with probability p
for (i in 2:n.days){
has_adopted[,i]=has_adopted[,i-1]
sampled=sample(c(1:n.doctors),2)
if(has_adopted[sampled[1],i-1]==0 & has_adopted[sampled[2],i-1]==1)
has_adopted[sampled[1],i]=sample(c(0,1),1,prob=c(1-p,p))
if(has_adopted[sampled[1],i-1]==1 & has_adopted[sampled[2],i-1]==0)
has_adopted[sampled[2],i]=sample(c(0,1),1,prob=c(1-p,p))
}
# return the output
return (has_adopted)
}
set.seed(42)
n.doctors = 100
initial.doctors = sample(c(0, 1), size = n.doctors, prob = c(0.9, 0.1), replace = T)
n.days = 500
p_0.2 = sim.doctors(initial.doctors, n.doctors, n.days, 0.2)
p_0.4 = sim.doctors(initial.doctors, n.doctors, n.days, 0.4)
p_0.6 = sim.doctors(initial.doctors, n.doctors, n.days, 0.6)
p_0.8 = sim.doctors(initial.doctors, n.doctors, n.days, 0.8)
p_1.0 = sim.doctors(initial.doctors, n.doctors, n.days, 1.0)
count_sum = function(x){
a = c()
for (i in 1: ncol(x))
a[i] = sum(x[,i])
return(a)
}
sum_0.2 = count_sum(p_0.2)
sum_0.4 = count_sum(p_0.4)
sum_0.6 = count_sum(p_0.6)
sum_0.8 = count_sum(p_0.8)
sum_1.0 = count_sum(p_1.0)
plot(c(1:n.days), ylim = c(0, 100), sum_0.2,
main = "number of doctors who adopted drug",
xlab = "days",
ylab = "number of doctors adopted drug", "l",
col = "red")
plot(c(1:n.days), ylim = c(0, 100), sum_0.2,
main = "number of doctors who adopted drug",
xlab = "days",
ylab = "number of drugs adopted", "l",
col = "red")
lines(c(1:n.days), sum_0.4, col = "blue")
lines(c(1:n.days), sum_0.6, col = "green")
lines(c(1:n.days), sum_0.8, col = "gold")
lines(c(1:n.days), sum_1.0, col = "black")
legend("bottomright", fill = c("red", "blue", "green", "gold", "black"), legend = c(0.2, 0.4, 0.6, 0.8, 1.0))
sim.doctors <- function(initial.doctors, n.doctors, n.days, p){
has_adopted = matrix(initial.doctors,nrow=n.doctors,ncol=n.days)
has_adopted[,i] = has_adopted[, i-1]
sampled = sample(c(1:n.doctors), 2)
if(has_adopted[sampled[1], i-1] == 0 & has_adopted[sampled[2], i-1] == 1)
has_adopted[sampled[1],i] = sample(c(0,1), 1, prob = c(1-p, p))
if(has_adopted[sampled[1],i-1] == 1 & has_adopted[sampled[2], i-1] == 0)
has_adopted[sampled[2],i] = sample(c(0,1), 1, prob = c(1-p, p))
}
# return the output
return (has_adopted)
}
sim.doctors <- function(initial.doctors, n.doctors, n.days, p){
has_adopted = matrix(initial.doctors,nrow=n.doctors,ncol=n.days)
has_adopted[,i] = has_adopted[, i-1]
sampled = sample(c(1:n.doctors), 2)
if(has_adopted[sampled[1], i-1] == 0 & has_adopted[sampled[2], i-1] == 1)
has_adopted[sampled[1],i] = sample(c(0,1), 1, prob = c(1-p, p))
if(has_adopted[sampled[1],i-1] == 1 & has_adopted[sampled[2], i-1] == 0)
has_adopted[sampled[2],i] = sample(c(0,1), 1, prob = c(1-p, p))
}
# return the output
return (has_adopted)
}
sim.doctors <- function(initial.doctors, n.doctors, n.days, p){
has_adopted = matrix(initial.doctors,nrow=n.doctors,ncol=n.days)
for (i in 2:n.days){
has_adopted[,i] = has_adopted[, i-1]
sampled = sample(c(1:n.doctors), 2)
if(has_adopted[sampled[1], i-1] == 0 & has_adopted[sampled[2], i-1] == 1)
has_adopted[sampled[1],i] = sample(c(0,1), 1, prob = c(1-p, p))
if(has_adopted[sampled[1],i-1] == 1 & has_adopted[sampled[2], i-1] == 0)
has_adopted[sampled[2],i] = sample(c(0,1), 1, prob = c(1-p, p))
}
# return the output
return (has_adopted)
}
set.seed(42)
n.doctors = 100
initial.doctors = sample(c(0, 1), size = n.doctors, prob = c(0.9, 0.1), replace = T)
n.days = 500
p_0.2 = sim.doctors(initial.doctors, n.doctors, n.days, 0.2)
p_0.4 = sim.doctors(initial.doctors, n.doctors, n.days, 0.4)
p_0.6 = sim.doctors(initial.doctors, n.doctors, n.days, 0.6)
p_0.8 = sim.doctors(initial.doctors, n.doctors, n.days, 0.8)
p_1.0 = sim.doctors(initial.doctors, n.doctors, n.days, 1.0)
count_sum = function(x){
a = c()
for (i in 1: ncol(x))
a[i] = sum(x[,i])
return(a)
}
sum_0.2 = count_sum(p_0.2)
sum_0.4 = count_sum(p_0.4)
sum_0.6 = count_sum(p_0.6)
sum_0.8 = count_sum(p_0.8)
sum_1.0 = count_sum(p_1.0)
plot(c(1:n.days), ylim = c(0, 100), sum_0.2,
main = "number of doctors who adopted drug",
xlab = "days",
ylab = "number of drugs adopted", "l",
col = "red")
lines(c(1:n.days), sum_0.4, col = "blue")
lines(c(1:n.days), sum_0.6, col = "green")
lines(c(1:n.days), sum_0.8, col = "gold")
lines(c(1:n.days), sum_1.0, col = "black")
legend("bottomright",
fill = c("red", "blue", "green", "gold", "black"),
legend = c(0.2, 0.4, 0.6, 0.8, 1.0))
plot(c(1:n.days), ylim = c(0, 100), sum_0.2,
main = "number of doctors who adopted drug",
xlab = "days",
ylab = "# of drugs adopted", "l",
col = "red")
plot(c(1:n.days), ylim = c(0, 100), sum_0.2,
main = "# doctors who adopted drug",
xlab = "days",
ylab = "# drugs adopted", "l",
col = "red")
lines(c(1:n.days), sum_0.4, col = "blue")
lines(c(1:n.days), sum_0.6, col = "green")
lines(c(1:n.days), sum_0.8, col = "gold")
lines(c(1:n.days), sum_1.0, col = "black")
legend("bottomright",
fill = c("red", "blue", "green", "gold", "black"),
legend = c(0.2, 0.4, 0.6, 0.8, 1.0))
