bml.init <- function(r, c, p){
m <- matrix(sample(c(0, 1, 2), c * r, prob = c(1-p, p/2, p/2), replace = T), nrow = r)
#return(m)
}
bml.step <- function(m){
initial_m1 = m
for (i in 1:nrow(m)) {
for (j in 1: (ncol(m)-1)){
if (initial_m1[i, j] == 1 & initial_m1[i, 1]==0) {
m[i, j+1] = 1
m[i,j] = 0
}
}
if (initial_m1[i, ncol(m)]==1 & initial_m1[i, 1]==0){
m[i,1] = 1
m[i, ncol(m)= 0]
}
}
initial_m2 = m
for (j in 1:ncol(m)){
for(i in nrow(m):2){
if (initial_m2[i, j]==2 & initial_m2[i-1, j] == 0){
m[i-1, j] = 2
m[i, j] = 0
}
}
if (initial_m2[1, j]==2 & initial_m2[nrow(m), j] == 0){
m[nrow(m), j] = 2
m[i, j] = 0
}
}
if (any(m!=initial_m2))
grid.new = T
else
grid.new = F
return(list(m, grid.new))
}
bml.step <- function(m){
initial_m1=m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m)-1)){
if (initial_m1[i,j]==1 & initial_m1[i,j+1]==0){
m[i,j+1]=1
m[i,j]=0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2=m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i,j]==2 & initial_m2[i-1,j]==0){
m[i-1,j]=2
m[i,j]=0
}
}
if (initial_m2[1,j]==2 & initial_m2[nrow(m),j]==0){
m[nrow(m),j]=2
m[1,j]=0
}
}
if(any(m!=initial_m1))
grid.new=T
else
grid.new=F
return(list(m, grid.new))
}
bml.step <- function(m){
initial_m1 = m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m) - 1)){
if (initial_m1[i,j] == 1 & initial_m1[i, j+1] == 0){
m[i, j+1] = 1
m[i,j] = 0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2 = m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i, j] == 2 & initial_m2[i-1, j] == 0){
m[i-1, j] = 2
m[i, j] = 0
}
}
if (initial_m2[1, j] == 2 & initial_m2[nrow(m), j] == 0){
m[nrow(m), j] = 2
m[1, j] = 0
}
}
if(any(m! = initial_m1))
grid.new = T
else
grid.new = F
return(list(m, grid.new))
}
bml.step <- function(m){
initial_m1 = m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m) - 1)){
if (initial_m1[i,j] == 1 & initial_m1[i, j+1] == 0){
m[i, j+1] = 1
m[i,j] = 0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2 = m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i, j] == 2 & initial_m2[i-1, j] == 0){
m[i-1, j] = 2
m[i, j] = 0
}
}
if (initial_m2[1, j] == 2 & initial_m2[nrow(m), j] == 0){
m[nrow(m), j] = 2
m[1, j] = 0
}
}
if(any(m! = initial_m1))
grid.new = T
else
grid.new = F
return(list(m, grid.new))
}
bml.step <- function(m){
initial_m1=m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m)-1)){
if (initial_m1[i,j]==1 & initial_m1[i,j+1]==0){
m[i,j+1]=1
m[i,j]=0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2=m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i,j]==2 & initial_m2[i-1,j]==0){
m[i-1,j]=2
m[i,j]=0
}
}
if (initial_m2[1,j]==2 & initial_m2[nrow(m),j]==0){
m[nrow(m),j]=2
m[1,j]=0
}
}
if(any(m!=initial_m1))
grid.new=T
else
grid.new=F
return(list(m, grid.new))
}
bml.step <- function(m){
initial_m1=m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m)-1)){
if (initial_m1[i,j]==1 & initial_m1[i,j+1]==0){
m[i,j+1]=1
m[i,j]=0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2=m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i,j]==2 & initial_m2[i-1,j]==0){
m[i-1,j]=2
m[i,j]=0
}
}
if (initial_m2[1,j]==2 & initial_m2[nrow(m),j]==0){
m[nrow(m),j]=2
m[1,j]=0
}
}
if(any(m!=initial_m1))
grid.new=T
else
grid.new=F
return(list(m, grid.new))
}
bml.sim <- function(r, c, p){
initial_m = bml.init(r, c, p)
new_m = list(initial_m, T)
max_iteration = 1000
for (i in 1:max_iteration){
new_m = bml.step(new_m[1]])
if (!(new_m[[2]]))
break
}
return (list(i, new_m[[1]], new_m[[2]]))
}
bml.sim <- function(r, c, p){
initial_m=bml.init(r,c,p)
new_m=list(initial_m,T)
max_iteration=1000
for (i in 1:max_iteration){
new_m=bml.step(new_m[[1]])
if (!(new_m[[2]]))
break
}
return (list(i,new_m[[1]],new_m[[2]]))
}
prob = seq(0.4, 0.9, by = 0.05)
B = 100
result.matrix = matrix(nrow = B, ncol = length(prob))
result.matrix
for (j in 1: length(prob)){
result.marix[, j] = replicate(B, bml.sim(5, 5, 0.35+j*0.05)[[3]])
}
colnames(result.matrix) <- prob
colnames(result.matrix) <- prob
d
counting_true = function(x){
count = 0
for (i in 1: length(x)){
if (x[i] == T)
count = count + 1
}
return(count)
}
summary_true = function(x){
count = c()
for (j in 1: ncol(x))
count = c(count, counting_true(x[,j]))
return (count/nrow(x))
}
result.matrix2 = matrix(nrow = B, ncol = length(prob))
for (j in 1: length(prob)){
result.matrix2[,j] = replicate(B, bml.sum(5, 5, 0.35+j*0.05)[[1]])
}
colnames(result.matrix2) <- prob
result.matrix2 = matrix(nrow = B, ncol = length(prob))
for (j in 1: length(prob)){
result.matrix2[,j] = replicate(B, bml.sim(5, 5, 0.35+j*0.05)[[1]])
}
colnames(result.matrix2) <- prob
sample1=bml.sim(500,500,0.4)
bml.sim(50, 50, 0.4)
bml.sim(50, 50, 0.3)
bml.sim(50, 50, 0.35)
p = c(35:50/100)
p_gridlock = 35:50
num_steps_for_gridlock = 35:50
sim = function(r,c){
for (i in 1:length(p)){
print(p[i])
results = bml.sim(r,c,p[i])
p_gridlock[i] = results[[1]]
num_steps_for_gridlock[i] = results[[2]]
}
jpeg(paste(r,"*", c, "_", 1,".jpg",sep = ""))
sim = function(r,c){
for (i in 1:length(p)){
print(p[i])
results = bml.sim(r,c,p[i])
p_gridlock[i] = results[[1]]
num_steps_for_gridlock[i] = results[[2]]
}
jpeg(paste(r,"*", c, "_", 1,".jpg",sep = ""))
plot(p, p_gridlock, main = paste("Probability of hitting a gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "P(Gridlock|p)")
text(p,p_gridlock,p_gridlock, pos  =3)
dev.off()
jpeg(paste(r,"*", c, "_", 2,".jpg",sep = ""))
plot(p, num_steps_for_gridlock, main = paste("Number of steps to reach gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "Number of steps to reach gridlock")
text(p,num_steps_for_gridlock, ceiling(num_steps_for_gridlock), pos  =2)
dev.off()
}
sim(10, 10)
bml.init <- function(r, c, p){
return(sample(c(0,1,2), size = r*c, prob = (1-p,p/2,p/2), replace = TRUE), nrow = r, ncol = c, byrow = TRUE)
}
bml.init <- function(r, c, p){
return(sample(c(0,1,2), size = r*c, prob = (1-p,p/2,p/2), replace = TRUE), nrow = r, ncol = c, byrow = TRUE)
}
bml.init <- function(r, c, p){
m <- matrix(sample(c(0, 1, 2), c * r, prob = c(1-p, p/2, p/2), replace = T), nrow = r)
#return(m)
}
bml.step <- function(m){
initial_m1=m
for (i in 1:nrow(m)) {
for (j in 1:(ncol(m)-1)){
if (initial_m1[i,j]==1 & initial_m1[i,j+1]==0){
m[i,j+1]=1
m[i,j]=0
}
}
if (initial_m1[i,ncol(m)]==1 & initial_m1[i,1]==0){
m[i,1]=1
m[i,ncol(m)]=0
}
}
initial_m2=m
for (j in 1:ncol(m)){
for (i in nrow(m):2){
if (initial_m2[i,j]==2 & initial_m2[i-1,j]==0){
m[i-1,j]=2
m[i,j]=0
}
}
if (initial_m2[1,j]==2 & initial_m2[nrow(m),j]==0){
m[nrow(m),j]=2
m[1,j]=0
}
}
if(any(m!=initial_m1))
grid.new=T
else
grid.new=F
return(list(m, grid.new))
}
bml.sim(50, 50, 0.4)
bml.sim(50, 50, 0.3)
bml.sim(50, 50, 0.35)
bml.sim <- function(r, c, p){
initial_m=bml.init(r,c,p)
new_m=list(initial_m,T)
max_iteration=1000
for (i in 1:max_iteration){
new_m=bml.step(new_m[[1]])
if (!(new_m[[2]]))
break
}
return (list(i,new_m[[1]],new_m[[2]]))
}
bml.sim(50, 50, 0.4)
bml.sim(50, 50, 0.3)
bml.sim(50, 50, 0.35)
p = c(35:50/100)
p_gridlock = 35:50
num_steps_for_gridlock = 35:50
sim = function(r,c){
for (i in 1:length(p)){
print(p[i])
results = bml.sim(r,c,p[i])
p_gridlock[i] = results[[1]]
num_steps_for_gridlock[i] = results[[2]]
}
jpeg(paste(r,"*", c, "_", 1,".jpg",sep = ""))
plot(p, p_gridlock, main = paste("Probability of hitting a gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "P(Gridlock|p)")
text(p,p_gridlock,p_gridlock, pos  =3)
dev.off()
jpeg(paste(r,"*", c, "_", 2,".jpg",sep = ""))
plot(p, num_steps_for_gridlock, main = paste("Number of steps to reach gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "Number of steps to reach gridlock")
text(p,num_steps_for_gridlock, ceiling(num_steps_for_gridlock), pos  =2)
dev.off()
}
plot(p, p_gridlock, main = paste("Probability of hitting a gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "P(Gridlock|p)")
plot(p, p_gridlock, main = paste("Probability of hitting a gridlock vs. p for matrix ", r, "*", c, sep=""), xlab = "p", ylab = "P(Gridlock|p)")
bml.init <- function(r, c, p){
return(sample(c(0,1,2), size = r*c, prob = (1-p,p/2,p/2), replace = TRUE), nrow = r, ncol = c, byrow = TRUE)
}
bml.step <- function(m){
step_car <- function(m,car){
if((car == 1 & ncol(m) == 1) | (car == 2 & nrow(m) == 1)){
return(m)
}
cars = m*(m==car)
block = (m!=0)[,c(2:ncol(m), 1)]
return(cars*block + (cars*!block)[,c(ncol(m), 1:(ncol(m)) - 1)] + m*(m!=car))
}
m_red = t(step_car(m,1))[,c(nrow(m):1)]
#   browser()
m_blue = t(step_car(m_red, 2)[,c(nrow(m):1)])
return(list(m_blue, !all(m_blue==m)))
}
text(p,p_gridlock,p_gridlock, pos  =3)
jpeg(paste(r,"*", c, "_", 2,".jpg",sep = ""))
sim(10, 10)
