listlength = c()
for (i in 1: length(data.list)) {
listlength[i] = length(data.list[[i]])
}
return (listlength)
}
List = list(c(1,2,3), c(1,2,3,4), c(1,2,3,4,5))
listLengths(List)
powers <- function(x, k){
x.powers <- matrix(nrow = k, ncol = x)
for(rows in 1: k)
for (cols in 1: x)
x.powers[rows, cols] <- (x^cols)
return(x.powers)
}
function (3, 2)
powers(3, 2)
recipeConversion <- function(recipe){
match <- c("amount", "unit", "ingredient")
if(sum(match %in% names(recipe)) < 3)
stop ("Incorrect column names. Need: amount, unit, and ingredient")
recipe$unit <- as.character(recipe$unit)
cups_index <- recipe$unit %in% c("cup", "cups")
recipe$unit[cups_index] <- "ml"
recipe$amount[cups_index] <- round(recipe$amount[cups_index]*236.5/5)*5
ounces_index <- recipe$unit == "oz"
recipe$unit[ounces_index] <- "gr"
recipe$amount[ounces_index] <- round(recipe$amount[ounces_index]*28.3/5)*5
return(recipe)
}
bootstrapVarEst <- function(x, B){
mu = c()
for (i in 1: B) {
mu[i] = mean(sample(x, size = length(x), replace = TRUE))
}
return (var(mu))
}
jackknifeVarEst <- function(x){
n <- length(x)
mus <- rep(0, n)
for (i in 1: n) {
mu_i <- mean(x[-i])
mus[i] <- mu_i
}
jack.sigma2.est <- var(mus)
jack.sigma2.est
}
samplingVarEst <- function(x, type = "bootstrap"){
if (type == "bootstrap") {
return (bootstrapVarEst(x, 5000))
}
else (type == "jackknife"){
return(jackknifeVarEst(x))
}
}
samplingVarEst <- function(x, type = "bootstrap"){
if (type == "bootstrap") {
return (bootstrapVarEst(x, 5000))
}
else (type == "jackknife"){
return(jackknifeVarEst(x))
}
}
samplingVarEst <- function(x, type = "bootstrap", B){
if (type == "bootstrap") {
bootstrapVarEst(x, B)
} else {
jackknifeVarEst(x)
}
}
samplingVarEst <- function(x, type = "bootstrap", B){
if (type == "bootstrap") {
bootstrapVarEst(x, B)
}
else { jackknifeVarEst(x)
}
}
samplingVarEst <- function(x, type = "bootstrap", B) {
if (type == "bootstrap") {
bootstrapVarEst(x, B)
}
else { jackknifeVarEst(x)
}
}
y <- seq(2, 200, by =2)
y
z <- paste0("hw", seq(1:20)
z
z <- paste0("hw", seq(1:20))
z
hit <- function(target) {}
hit <- function(target){
a <- sample(1:100, size=1)
return(list(a, a == target))
}
hit(5)
sim <- function(target, max.it = 200) { i <1 values <- c()}
sim_hit <- function(target, max.it=200){
i <- 1 #the counter
values <- c() #dummy vector to store results
while (i < max.it){
res <- hit(target)
values[i] <- res[[1]]
if (res[[2]]){break}
i <- i+1
}
return(list(values, i, res[[2]]))
}
results <- sim_hit(5)
results
sim_hit(5, max.it=100)
targets <- seq(10, 100, by=10)
B <- 1000
result.matrix <- matrix(nrow=B, ncol=length(targets))
for (i in 1:length(targets)){
#print(i)
result.matrix[,i] <- replicate(B, sim_hit(target=targets[i])[[2]])
}
colnames(result.matrix) <- targets
boxplot(result.matrix, xlab="Target Value", ylab="#Iterations")
name = 'phil'
number = 495
happy = TRUE
mode(name)
mode(number)
mode(happy)
mintemp = c(50.7, 52.8, 48.6, 53.0, 49.9, 47.9, 54.1, 47.6, 43.6, 45.5)
mintemp[-c(1,10)]
mintempC = 5/9 * (mintemp-32)
mintempC
x = 1:10
x
rep(5, 3)
y = 3:7
rep(y, 3)
y = 3:7
rep(1:4, c(2, 3, 3, 4))
taxrate = c(AL = 4, CA = 7.25, IL = 6.25, KS = 5.4, NY = 4.25, TN = 7)
taxrate
taxrate = c(4,7.25,6.25,5.40,4.25,7)
taxrate
names(taxrate) = c('AL', 'CA', 'IL', 'KS', 'NY', 'TN')
taxrate
taxrate[3]
taxrate['KS']
taxrate < 6
taxrate[taxrate > 6]
sum(taxrate > 6)
max(taxrate)
taxrate[taxrate == max(taxrate)]
which(taxrate == max(taxrate))
which.max(taxrate)
bml.init <- function(r, c, p){
matrix(sample(c(0, 1, 2), r * c, prob = c(1-p, p/2, p/2), replace = T), nrow = r_
#return(m)
}
bml.init <- function(r, c, p){
matrix(sample(c(0, 1, 2), r * c, prob = c(1-p, p/2, p/2), replace = T), nrow = r)
#return(m)
}
bml.init
return(m)
return(matrix)
bml.init <- function(r, c, p){
m(sample(c(0, 1, 2), c * r, prob = c(1-p, p/2, p/2), replace = T), nrow = r)
#return(m)
}
m
bml.init
bml.init <- function(r, c, p){
m <- matrix(sample(c(0, 1, 2), c * r, prob = c(1-p, p/2, p/2), replace = T), nrow = r)
#return(m)
}
return(m)
source.with.encoding('~/src/stat133/midterm-review/SFHousing.rda', encoding='UTF-8')
load("~/src/stat133/midterm-review/SFHousing.rda")
head(housing)
summay(SFHousing$date)
summary(SFHousing$date)
summary(housing$date)
tmp <- housing$date
class(tmp)
names(housing)
summary(br)
summary(housing$br)
housing.less3 <- housing[housing$br < 3, ]
housing.less3
d
dim(housing.less3)
summary(housing.less3$br)
table(housing.less3$br)
max(housing.less3$br)
housing.less3.Berkeley <- housing [(housing$br < 3) $ (housing$city == "Berkeley), ]
housing.less3.Berkeley <- housing [(housing$br < 3) & (housing$city == "Berkeley), ]
d
d
end
clear
dddd
)
]
dddd
clr
()
)
clc
names(fit)
x <- 1:100
x
x = 1:100
x <- seq (1: 100, by=2)
x <- seq (1: 100, by=1)
x <- seq(1: 100, by=1)
x <- c(1:100)
x
clear
two.plus.two <- 2 + 2
setwd(dir)
setwd
setwd("~/src/stat133/midterm-review")
load("ex1-data.csv")
ex1.data <- load("ex1-data.csv")
ex1.data <- load('ex1-data.csv')
ex1.data <- read.csv('ex1-data.csv', header = T)
summary(ex1-data.csv)
summary(ex1.data)
ex1.data.v <- ex1.data$x
ex1.data.v
data.class <- class(ex1.data.v)
data.class
n.ex1.data <- length(ex1.data.v)
n.ex1.data
data.mean <- mean(ex1.data.v)
data.mean
data.mean.trimmed <- mean(ex.1.data.v, trim = 0.1)
data.mean.trimmed <- mean(ex1.data.v, trim = 0.1)
data.mean.trimmed
data.sd <- sd(ex1.data.v)
data.sad
data.sd
min.ex1.data <- min(ex1.data.v)
max.ex1.data <- max(ex1.data.v)
min.ex1.data
max.ex1.data
data.summary <- summary(ex1.data.v)
data.summary
ex1.data.double <- 2 * ex1.data.v
ex1.data.double
ex1.data.sum <- sum(ex1.data.v)
ex1.data.sum
random.data <- rnorm(100)
random.data
data.cor <- cor(ex1.data.v, random.data)
data.cor
load("family.rda")
view("family.rda")
summary("family.rda")
View(family)
View(family)
OW_NHANES <- (family$gender == 'm' & family$bmi > 26) | (family$gender == 'f' & family$bmi > 25)
OW_NHANES
OWval <- c(26, 25)
OWval
OW_limit <- OWval[as.numeric(family$gender)]
OW_limit
OW_NHANES2 <- OW_limit <- family$bmi
OW_NHANES2
OW_weight <- OW_limit * ((2.54/100 * height)^2) * 2.2
OW_weight <- OW_limit * ((2.54/100 * family$height)^2) * 2.2
OW_weight
plot(family$weight, OW_height)
plot(family$weight, OW_weight)
abline(a = 0, b = 1, col = 'red')
load("SFHousing.rda")
class(SFHousing)
View(housing)
View(housing)
View(housing)
View(housing)
class(housing)
dim(housing)
head(housing)
names(housing)
summar(housing)
summary(housing)
n.cities <- nrow(housing)
n.cities
n.housesale <- nrow(housing)
n.housesale
n.housesale.Berk <- sum(housing$city=="Berkeley")
n.housesale.Berk
all.housing.variable <- names(housing)
all.housing.variable
local.cities <- c("Albany", "Berkeley", "Piedmont", "Emeryville")
local.cities
view(local.cities)
summary(local.cities)
some.housing.variables <- c("city", "zip", "price", "br", "bsqft", "year")
BerkArea <- housing[housing$city %in% local.cities, some.housing.variables]
BerkArea
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price) = 0.99) & (BerkArea$bsqft <= quantile(BerkArea$bsqft) = 0.99)]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price) = 0.99)
& (BerkArea$bsqft <= quantile(BerkArea$bsqft) = 0.99, na.rm = TRUE))]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft) = 0.99, na.rm = TRUE
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft) = 0.99, na.rm = TRUE)), ]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, p = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft, p = 0.99, na.rm = TRUE)), ]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft = 0.99, na.rm = TRUE)), ]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, p = 0.99))
+                      & (BerkArea$bsqft <= quantile(BerkArea$bsqft, p = 0.99, na.rm = TRUE)), ]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, p = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft, p = 0.99, na.rm = TRUE)), ]
BerkArea <- BerkArea[(BerkArea$price <= quantile(BerkArea$price, p = 0.99))
& (BerkArea$bsqft <= quantile(BerkArea$bsqft, p = 0.99, na.rm = TRUE)), ]
View(BerkArea)
View(BerkArea)
View(BerkArea)
BerkArea$pricePsqft <- (BerkArea$price / BerkArea$bsqft)
BerkArea$pricePsqft
br5 <- BerkArea$br
br[BerkArea$br > 4] <- 5
br5[BerkArea$br > 4] <- 5
rCols <- rainbow(5, alpha = 0.25)
rCols
brCols <- rCols[5]
brCols
plot(pricePsqft ~ bsqft,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
legend(legend = 1:5, fill = rCols, "topright")
plot(pricePsqft ~ year,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
vlegend(legend = 1:5, fill = rCols, "topright")
legend(legend = 1:5, fill = rCols, "topright")
x <- c(2:20, seq=2)
x
x <- seq(2:20, by=2)
x
x <- seq(2, 20, by = 2)
x
x <- c(2:20:2)
x <- c(2:20, 2)
x
x <- seq(2, 20, by = 2)
x
y <- seq(-1, -19, by = -2)
y
z <- seq(1, 5, rep = 5)
z <- rep(1, 5, each = 5)
z
z <- rep(1:5, each = 5)
z
m <- matrix(seq(10, 120, by = 10), nrow = 3, byrow = T)
m
n <- data.frame(1:10, letters[1:10], 1:10%%2 = 0)
n <- data.frame(1:10, letters[1:10], 1:10%%2 == 0)
n
n <- data.frame(num = 1:10, lett = letters[1:10], even = 1:10%%2 == 0)
n
p <- list(x, y, z, m)
p
set.seed(42)
nmat <- matrix(rnorm(100^2), 6, 2), nrow = 100)
nmat <- matrix(rnorm(100^2, 6, 2), nrow = 100)
nmat
load("rainfallCO.rda")
view(rainfall)
summary(rainfall)
summary(rainfallCO)
type.rain <- class(rain)
type.rain
name.stations <- names(rain)
name.stations
n.obs <- sapply(rain, length)
n.obs
max.rain <- sapply(rain, max)
max.rain
boxplot(rain)
yr.2000 <- floor(day[[1]]) == 2000
yr.2000 <- floor(day[[1]]) == 2000
yr.2000 <- floor(day[[1]]) == 2000
rainfall.subset <- rain[[1]][yr.2000]
day.subset <- day[[1]][yr.2000]
plot(day.subset, rainfall.subset, xlab ='day', ylab = 'rainfall')
load("KaiserBabies.rda")
fit <- lm(bwt ~ gestation, data=infants)
fit
plot(bwt ~ gestation, data=infants, xlab = 'gestation', ylab = 'bwt')
abline(a = fit$coef[1], b = fit$coef[2], col = 'red')
View(infants)
View(infants)
hist(infants$dht)
ed.table <- table(infants$ed, infants$ded)
ed.table
load("SFHousing-1.rda")
mean.price <- mean(housing)
View(housing)
View(housing)
mean.price <- mean(housing$price)
mean.price
med.price <- median(housing$price)
med.price
price.diffs <- sapply(housing$price, function(p) abs(p-mean.price))
price.diffs
housing.large <- (housing$br > 3)
housing.large
housing.large <- [housing$br > 3, ]
housing.large <- housing[housing$br > 3, ]
housing.large
housing.small <- housing[housing$br <= 3, ]
housing.small
housing.large.price <- housing.large$price
housing.large.price
housing.small.price <- housing.small$price
housing.small.price
sqftByPrice <- function(price.cutoff, prices, lsqft) {
# your code here
if(length(prices) != length(lsqft)) stop("prices and lsqft should be the same length")
}
plot(housing$bqft, housing$price, main = "Housing price vs. Building sqft", pch = 20)
plot(housing$bsqft, housing$price, main="Housing price vs Building sqft",
pch=20)
abline(a-169500, b=275, col = 'red')
abline(a=169500, b=275, col = 'red')
y <- seq(2, 200, by -2)
y
y <- seq(2, 200, by =2)
y
z <- paste0("hw", seq(1:20))
z
set.seed(42)
m <- rnorm(100)
m
mean.m <- mean(m)
mean.m
max.m <- max(m)
setwd("~/src/stat133/assignments/hw1")
load("family.rda")
clss(family)
class(family)
View(family)
family.men <- subset(family, gender == "m")
family.men
family.young <- subset(family, age < 40)
family.young
family.30y68i <- subset(family, age > 30, height < 48)
family.30y68i
family.30y68i <- subset(family, age > 30, height < 68)
family.30y68i
bmi <- (family$weight)/((family$height^2) * 703)
bmi
family2 <- transform(family, newColumn=bmi)
colnames(family2[6] <- "bmi")
colnames(family2[6] <- "bmi")
family2
family2 <- transform(family, newColumn= 'bmi')
family2
family2 <- data.frame(family, bmi)
family2
setwd("~/src/stat133/assignments/hw2")
load("WR1500MeterMen.rda")
n.wr <- ncol(wr1500m)
n.wr
View(wr1500m)
View(wr1500m)
n.wr <- wr1500m$athlete[wr1500m$times == min(wr1500m$times)]
n.wr
times_sec <- wr1500m$times + 180
wr1500m <- data.frame(wr1500m, times_sec)
plot(wr1500m$year, wr1500m$times_sec, type ="s")
wr1500m$month[is.na(wr1500m$month)] = 6
new_year= wr1500m$year + (wr1500m$month/12)
wr1500m = data.frame(wr1500m, new_year)
plot(wr1500m$new_year, wr1500m$times_sec, type = "s")
wr_1998 = new_year[wr1500m$times == min(wr1500m$times)]
plot(wr1500m$new_year, wr1500m$times_sec, type = "s",
xlim = c(min(wr1500m$new_year), 2020))
lines(x = c(wr_1998, 2014 + 9/12), y = rep(wr1500m$times_sec[51], 2))
lines(x = c(wr_1998, 2014 + 9/12), y = rep(wr1500m$times_sec[51], 2))
wr_1944 <- new_year[wr1500m$year == 1944]
abline(v = wr_1944, col = "grey")
abline(v = wr_1998, col = "grey")
text(wr_1944, wr1500m$times_sec[wr1500m$new_year == wr_1944],
labels = wr1500m$athlete[wr1500m$new_year == wr_1944],
adj = 1, cex = 0.7, col = "blue")
text(wr_1998, wr1500m$times_sec[wr1500m$new_year == wr_1998],
labels = wr1500m$athlete[wr1500m$new_year == wr_1998],
adj = 1, cex = 0.7, col = "red")
plot(wr1500m$new_year, wr1500m$times_sec, type = "s",
xlim = c(1892, 2015), xlab = "Year",
ylab = "Record Times in sec", main = "1500m Men's Swimming World Record")
abline(v = wr_1944, col = "grey")
abline(v = wr_1998, col = "grey")
points(x = c(wr_1998, (2012+9/12)),
y = rep(wr1500m$times_sec[wr1500m$new_year == wr_1998], 2),
type = "l")
text(wr_1944-0.5, wr1500m$times_sec[wr1500m$new_year == wr_1944],
labels = wr1500m$athlete[wr1500m$new_year == wr_1944],
adj = 1, offset = 2, cex = 0.7, col = "blue")
text(wr_1998-0.5, wr1500m$times_sec[wr1500m$new_year == wr_1998],
labels = wr1500m$athlete[wr1500m$new_year == wr_1998],
adj = 1, offset = 2, cex = 0.7, col = "green")
